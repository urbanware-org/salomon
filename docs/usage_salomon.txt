
USAGE (salomon.sh)

    Contents:

        1.  Definition
        2.  General stuff
          2.1  Overview of all command-line arguments
          2.2  Shell requirements
          2.3  Colorize and highlight certain lines
             2.3.1  Color config files
             2.3.2  Highlight filter terms
             2.3.3  Highlight whole lines
          2.4  Config file paths
          2.5  File paths containing spaces and special characters
             2.5.1  Whitespaces
             2.5.2  Quotation marks
             2.5.3  Backslashes
          2.6  Interactive dialogs
          2.7  Limitations
             2.7.1  OpenBSD
        3.  Process input files
          3.1  Relevant keystrokes
          3.2  Monitor a file
          3.3  Analyze a file
          3.4  Multiple input files
          3.5  Merge multiple input files
          3.6  Input file without path
        4.  Applying a filter
          4.1  Filter pattern
          4.2  Filter config file
        5.  Exclude lines
        6.  Remove certain strings
        7.  Head and tail feature
          7.1  Head feature
          7.2  Tail feature
        8.  Pause output
          8.1  Prompt to continue
             8.1.1  Using the integrated method
             8.1.2  Using the 'less' command
          8.2  Prompt before exit
        9.  Reduce the output speed
          9.1  Wait after printing a colorized line
          9.2  Slow down the process in general
       10.  Force text color
       11.  Export output into a file

    1. Definition

        Monitor and analyze log and plain text files with various highlighting
        and filtering features.

    2. General stuff

        2.1 Overview of all command-line arguments

            The script requires command-line arguments to operate. You can get
            an overview of all arguments available, by simply running the main
            script with the '--help' (or '-?' argument):

                ./salomon.sh --help

        2.2 Shell requirements

            The Salomon project was developed on (and for) the Bash shell,
            which is the default shell on many Unix-like systems (or at least
            on many Linux distributions).

            No matter which shell you are using, the Bash shell (version 4 or
            higher) must be installed in order to use the project.

            Further information can be found inside the included documentation
            for the shell compatibility script.

        2.3 Colorize and highlight certain lines

            In first place, Salomon has been developed to monitor and analyze
            files by colorizing lines which contain certain terms (which can
            additionally be highlighted sort of marker pen like) to get a fast
            overview of the contents (e.g. to easily detect error messages
            inside log files).

            2.3.1 Color config files

                Inside the 'colors' sub-directory there is a sample color
                config file named 'sample_colors.cfg'. It can be used to
                colorize lines containing certain terms with user-defined
                colors. This sample config file also contains some simple
                usage examples how to do this.

                The color files must be given using the '--color-file' (or
                '-c') argument.

            2.3.2 Highlight filter terms

                The '--highlight-matches' (or '-hm') command-line argument
                allows to also highlight the filter terms inside by inverting
                their colors (foreground color becomes background color and
                vice versa which makes it look sort of marker pen like). It
                requires a filter, but can be used with as well as without a
                color config file.

                You may also use '--highlight-upper' (or '-hu') instead, which
                works the same way and additionally switches the letters of
                the filter terms to upper case.

            2.3.3 Highlight whole lines

                Instead of only highlighting the filter terms, you can also
                highlight the whole line using '--highlight-all' (or '-ha').
                This does neither require a color config file nor a filter.

                If you want to remove the trailing whitespaces used to fill
                the highlighted lines, add the '--cut-off' argument.

        2.4 Config file paths

            You do not have to give the full path to the config files for
            Salomon if these are located in the corresponding sub-directories.

            So, in case you only give the file name (instead of the path) for
            the color or filter config like this:

                ./salomon.sh -a monitor -i /var/log/foobar.log -c colors.cfg \
                             -f filter.cfg

            If the color file name is given without a path, Salomon checks the
            following in the given order:

                1. Current working path
                2. User config path ('/home/johndoe/.config/salomon/colors')
                3. Salomon installation path ('/opt/salomon/colors')

         2.5 File paths containing spaces and special characters

            Usually, paths containing spaces and special characters are simply
            enclosed with either single (') or double (") quotes.

            If you do not want to enclose the whole path for some reason, you
            have to escape spaces as well as special characters such as quotes
            or backslashes inside the file name.

            Notice that each of those characters must be escaped which also
            applies to consecutive ones.

            Due to the fact, that backslashes are escape characters, it is
            most unlikely that a file path contains any. However, if it does,
            backslashes must also be escaped.

            Below you can find a few examples of escaped characters.

            2.5.1 Whitespaces

                Single space:

                    File path:  /home/johndoe/server mails.log
                    Escaped:    /home/johndoe/server\ mails.log

                Multiple spaces:

                    File path:  /home/johndoe/server user logins.log
                    Escaped:    /home/johndoe/server\ user\ logins.log

                Multiple spaces (consecutively):

                    File path:  /home/johndoe/server   user logins.log
                    Escaped:    /home/johndoe/server\ \ \ user\ logins.log

            2.5.2 Quotation marks

                Single quotes:

                    File path:  /home/johndoe/output of 'tail'.log
                    Escaped:    /home/johndoe/output\ of\ \'tail\'.log

                Double quotes:

                    File path:  /home/johndoe/output of "tail".log
                    Escaped:    /home/johndoe/output\ of\ \"tail\".log

            2.5.3 Backslashes

                Most unlikely, but just in case:

                    File path:  /home/johndoe/foo\bar.log
                    Escaped:    /home/johndoe/foo\\bar.log

        2.6 Interactive dialogs

            You can use interactive dialogs instead of or in combination with
            command-line arguments by giving either the '--interactive' or
            '--dialogs' argument:

                ./salomon.sh --dialogs

            However, if you give further arguments like this

                ./salomon.sh --dialogs -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg

            the values will be automatically applied to the dialogs. For
            example, the dialog window asking for the input file will already
            contain '/var/log/foobar.log', which can still be changed.

            The dialogs inside the text-based user interface can be displayed
            using the tools 'dialog' and 'whiptail'. By default, Salomon does
            automatically detect which of both is installed and uses the
            corresponding one. If both are, 'dialog' is being preferred.

            However, you also can explicitly set the one that should be used
            inside the 'salomon.cfg' config file. For example, if you want to
            only use 'whiptail', edit the file and set the value of the option
            'dialog_program' from 'auto' to 'whiptail':

                dialog_program=whiptail

            Furthermore, inside that config file you can set which dialogs
            should be shown when using interactive mode. For example, if you
            want to disable the welcome dialog change the value of the option

                dialog_show_welcome=1

            to the following:

                dialog_show_welcome=0

        2.7 Limitations

            2.7.1 OpenBSD

                Unlike in FreeBSD or NetBSD, the 'sed' command provided by
                default in OpenBSD does not support the 'i' (ignore case)
                flag.

                Due to this, there are some limitations (or differences) which
                affect the '-hm' (or '--highlight-matches') and '-hu' (or
                '--highlight-upper') as well as the '-r' (or '--remove')
                argument.

                When using '-hu' (or '--highlight-upper'), the whole line will
                be switched to upper case instead of just the highlighted
                term.

                Furthermore, '-hm' (or '--highlight-matches') is identical
                with '-hu' (or '--highlight-upper'). Both arguments have the
                same effect.

                The remove pattern from '-r' (or '--remove') is always case-
                sensitive unless one of those highlighting arguments is also
                given. If so, the remove pattern is automatically applied in
                upper case for those lines. So, in that constellation the
                pattern is case-insensitive.

    3. Process input files

        There are different ways to process the given input file or files.

        Input files must be given using the '--input-file' (or '-i') argument.

        3.1 Relevant keystrokes

            The Salomon process (no matter if monitoring or analyzing) can be
            canceled at any time by pressing the universal and well-known
            <Ctrl>+<C> keystroke.

            By pressing <Ctrl>+<S> the output freezes until unfreezing it
            again using <Ctrl>+<Q>.

            Notice that this is not a feature of Salomon, but a function of
            the terminal device driver. When in monitoring mode no lines will
            be lost. As soon as you unfreeze the output, the lines that would
            have been shown in the meantime will be printed afterwards.

            Salomon also provides an optional pause feature based on the
            number of output lines, see section 8 below.

        3.2 Monitor a file

            This feature uses the follow mode of the 'tail' utility to return
            the lines of the file and colorizes the output with user-defined
            colors. The file will be monitored until the user cancels the
            process.

            For example, to monitor the file '/var/log/foobar.log' using the
            color file 'log_colors.cfg' to colorize certain lines:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg

            Alternatively, you can also give the '--monitor' command-line
            argument instead of '--action' (or '-a'):

                ./salomon.sh --monitor -i /var/log/foobar.log \
                             -c log_colors.cfg

        3.3 Analyze a file

            Instead of monitoring a file, it is also possible to analyze it.
            This will simply return its lines and colorize certain of them,
            then exit.

            For example, to analyze the file '/var/log/foobar.log' using the
            color file 'log_colors.cfg' to colorize certain lines:

                ./salomon.sh -a analyze -i /var/log/foobar.log \
                             -c log_colors.cfg

            Alternatively, you can also give the '--analyze' command-line
            argument instead of '--action' (or '-a'):

                ./salomon.sh --analyze -i /var/log/foobar.log \
                             -c log_colors.cfg

            When analyzing large files, you can pause the output to keep track
            of the information from the output. For details see section 8.1
            below.

        3.4 Multiple input files

            You can also provide multiple (two or more) input files at once.

            When monitoring multiple files a separator will be displayed that
            shows to which file a new line was last added and when analyzing
            they will simply be processed one by another.

            For example, to monitor '/var/log/foo.log' and '/var/log/bar.log'
            using the color file 'log_colors.cfg' to colorize certain lines:

                ./salomon.sh -a monitor -c log_colors.cfg \
                             -i /var/log/foo.log -i /var/log/bar.log

            Notice that the '-i' argument (or its long form '--input-file') is
            required for each input file given.

        3.5 Merge multiple input files

            This feature is primarily intended for analyzing multiple files.

            Usually, the files are processed one after another by default.
            However, in some cases it is useful to be able to merge several
            log files of the same type (e.g. mail logs) into one, especially
            when working with timestamps.

            This can simply be done using the '--merge' (or '-m') argument.
            For example:

                ./salomon.sh -a monitor -c log_colors.cfg -m \
                             -i /var/log/maillog_1.log \
                             -i /var/log/maillog_2.log \
                             -i /var/log/maillog_3.log

            When using the merge feature with monitoring mode, it simply
            removes the file separators from the output.

        3.6 Input file without path

            In case a given input file path does not exist, Salomon also
            checks the default log file path '/var/log' for the file.

            For example, if you execute the following command

                ./salomon.sh -a monitor -i foobar.log

            and the given file 'foobar.log' does not exist inside the current
            working directory, Salomon also checks for '/var/log/foobar.log'.

    4. Applying a filter

        It is possible to filter the output to e.g. only return lines that
        contain certain terms. There is also the optional '--ignore-case'
        (or '-ic') argument to ignore the case of the given filter pattern.

        The pattern also allows spaces, including leading and trailing ones.
        It must be given using the '--filter' (or '-f') argument.

        4.1 Filter pattern

            For example, to only return lines that contain the term "error" no
            matter if lower or upper case:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -f error -ic

            The pattern also allows spaces, but when using such the criteria
            must be enclosed either with single (') or double (") quotes, for
            example:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -f "error while" -ic

            This will return lines that contain the term "error while", but no
            lines which contain only one of those words.

            In case this does not work properly for whatever reason, you may
            try escaping the space (each of them if there are multiple) using
            a backslash like this:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -f "error\ while" -ic

            Furthermore, the pattern allows multiple terms. These must be
            separated with semicolons and be enclosed either with single (')
            or double (") quotes, for example:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -f "error;warning;success" -ic

            This will return lines that contain one of those terms.

            A combination of spaces and multiple terms inside the pattern also
            is supported:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg \
                             -f "error while;warning;success" -ic

        4.2 Filter config file

            Even though, the help output of the script returns that the filter
            argument expects a pattern, it is also possible to give a config
            file containing the pattern.

            Inside the 'filters' sub-directory there is a sample filter config
            file named 'sample_filter.cfg'. This file contains usage examples
            how to filter the output.

            For example, to use that file as filter pattern:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -f sample_filter.cfg -ic

            If the filter file name is given without a path, Salomon checks
            the following in the given order:

                1. Current working path
                2. User config path ('/home/johndoe/.config/salomon/filters')
                3. Salomon installation path ('/opt/salomon/filters')

            Notice that in case the file does not exist in any of them, the
            script interprets the given path as a filter pattern instead.

    5. Exclude lines

        Sometimes it makes sense to exclude lines to get a clearer output.

        The exclude pattern must be given using the '--exclude' (or '-e')
        argument. Notice that the exclude term of is always processed case-
        insensitive. So when e.g. giving the string "foobar", lines containing
        "FOOBAR" will also be excluded.

        For example, to exclude all lines containing the string "example":

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -e example

        The exclude pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -e "example for"

        This will exclude lines that contain the term "example for", but no
        lines which contain only one of those words.

        In case this does not work properly for whatever reason, you may try
        escaping the space (each of them if there are multiple) using a
        backslash like this:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -e "example\ for"

        Furthermore, the pattern allows multiple exclude terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -e "example;foo;bar"

        This will exclude lines that contain at least one of those terms.

        A combination of spaces and multiple terms inside the exclude pattern
        also is supported:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -e "example for;foo;bar"

    6. Remove certain strings

        In some case it also makes sense to remove strings to get a clearer
        output.

        The remove pattern must be given using the '--remove' (or '-r')
        argument. Notice that the exclude term of is always processed case-
        insensitive. So when e.g. giving the string "foobar" also "FOOBAR"
        will be excluded.

        For example, to remove the string "example" from all output lines:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -r example

        The remove pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -r "example for"

        This will remove the string "example for", but not just one of those
        words.

        In case this does not work properly for whatever reason, you may try
        escaping the space (each of them if there are multiple) using a
        backslash like this:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -r "example\ for"

        Furthermore, the pattern allows multiple remove terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -r "example;foo;bar"

        This will remove all of the given terms from the corresponding lines.

        A combination of spaces and multiple terms inside the remove pattern
        also is supported:

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         -r "example for ;foo;bar"

    7. Head and tail feature

        Notice that both features do not work with multiple input files. When
        analyzing a large file it may take a while until the whole file has
        been printed on the output.

        Salomon provides are two arguments to simply return a certain amount
        of lines.

        7.1 Head feature

            For example, if you just need the first 30 lines of a log file,
            you can use the '--head' (or '-h') command-line argument:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -h 30

        7.2 Tail feature

            For example, if you just need the last 30 lines of a log file, you
            can use the '--tail' (or '-t') command-line argument:

                ./salomon.sh -a monitor -i /var/log/foobar.log \
                             -c log_colors.cfg -t 30

    8. Pause output

        8.1 Prompt to continue

            When analyzing large files, the output can be very cluttered which
            makes it difficult to keep track of the information.

            So, there are two methods available to pause the output using a
            prompt to continue.

            First, there is an integrated one which processes the input files
            line by line, returning one after another. When the output reaches
            the preferred number of lines, the prompt will be displayed.

            Second, one using the 'less' command. With this method, Salomon
            processes all input files first and returns the output as a whole
            then. There is no output of the input files while processing, only
            a progress information.

            8.1.1 Using the integrated method

                With the '--pause' argument you can pause the output either
                after a user-defined number of lines or automatically by
                determining the number of lines of the terminal Salomon is
                currently running in.

                For example, to pause the output after 30 lines, the command
                would look like this:

                    ./salomon.sh -a monitor -i /var/log/foobar.log --pause 30

                When you give 'auto' instead of a number, Salomon determines
                the height of the terminal (number of lines) and pauses based
                on that value (like when using the 'more' command).

                    ./salomon.sh -a monitor -i /var/log/foobar.log \
                                 --pause auto

                When the corresponding number of lines is reached, a typical

                    Press any key to continue

                message appears. As this already suggests the output continues
                after pressing a key.

                However, you should avoid pressing certain keys such as the
                delete key, arrow keys, F-keys and the right-click keyboard
                shortcut, as this will result in skipping pauses.

                Notice that when using this method there is no way to scroll
                up inside the output via keyboard. The only way is by using
                the scroll wheel on the mouse if latter is available in the
                environment.

            8.1.2 Using the 'less' command

                Alternatively, Salomon can use the 'less' command to analyze
                the output instead, which allows scrolling up and down through
                the entire file using just the keyboard.

                Simply add the '--less' argument to the command. For example:

                    ./salomon.sh -a monitor -i /var/log/foobar.log --less

                Notice that there is no interactive dialog for selecting this
                method, so it must be given as command-line argument.

        8.2 Prompt before exit

            If you are running Salomon e.g. via shortcut inside a terminal
            window which closes automatically as soon as the Salomon process
            gets canceled, you can use the '--prompt' (or '-p') argument which
            prompts for pressing a key to exit.

    9. Reduce the output speed

        You can slow down the output on one hand to get a better overview, on
        the other to decrease the CPU usage (depending on the amount of data
        that is being processed).

        9.1 Wait after printing a colorized line

            The argument '--wait' (or '-w') allows to wait after printing a
            colorized line. It requires a delay in seconds to be given. For
            example to wait for 3 seconds after each colorized line printed:

                ./salomon.sh -a monitor -i /var/log/foobar.log -w 3

        9.2 Slow down the process in general

            To do so, simply add the '--slow' (or '-s') argument:

                ./salomon.sh -a monitor -i /var/log/foobar.log -s

            This will slow down the output using a delay of 200 milliseconds
            before printing the next line.

            The delay can be modified using the additional '--delay' (or '-d')
            argument. You can give a value between 100 and 900 milliseconds.
            For example:

                ./salomon.sh -a monitor -i /var/log/foobar.log -s -d 100

    10. Force text color

        If the colors inside a color config file are light and designed for
        using them on a terminal with a dark background and you want to use it
        in a terminal with a light background, you do not have to edit the
        color config file.

        Instead, you can use the '--force-dark' argument to force using dark
        text colors or also '--force-light' for light ones.

        However, this only works with the 16 pre-defined color names mentioned
        inside the 'sample_colors.cfg' config file inside the 'colors' sub-
        directory.

    11. Export output into a file

        You can simultaneously write the output of Salomon into a file
        including the colors and highlighting.

        The purpose of this feature is that you have an exact copy of the
        relevant output displayed on the screen requiring neither the original
        log file nor the appropriate Salomon command-line arguments.

        For example, to export the output of the following command

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg

        into the file '/home/johndoe/export.log':

            ./salomon.sh -a monitor -i /var/log/foobar.log -c log_colors.cfg \
                         --export-file /home/johndoe/export.log

        Now, by using e.g. 'cat' you can display the exported data as seen in
        the output. You do not even need Salomon for that as the exported file
        contains the required color and highlighting codes.

        However, editing the file with an editor will not work, due to the
        fact, that the editor will (or should) also print these codes instead
        of interpreting them.

