
USAGE (salomon.sh)

    Contents:

        1.  Definition
        2.  General stuff
          2.1  Overview of all command-line arguments
          2.2  Important notice
          2.3  Colorize and highlight certain lines
             2.3.1  Color config files
             2.3.2  Highlight filter terms
             2.3.3  Highlight whole lines
             2.3.4  No colorization and hightlighting
          2.4  Config file paths
          2.5  Interactive mode
        3.  Processing an input file
          3.1  Relevant keystrokes
          3.2  Monitor the file
          3.3  Analyze the file
        4.  Applying a filter
          4.1  Filter pattern
          4.2  Filter config file
        5.  Exclude lines
        6.  Remove certain strings

    1. Definition

        Monitor and analyze log and plain text files with various filter and
        highlighting features.

    2. General stuff

        2.1 Overview of all command-line arguments

            The script requires command-line arguments to operate. You can get
            an overview of all arguments available, by simply running the main
            script with the '--help' argument:

                $ ./salomon.sh --help

        2.2 Important notice

            The SaLoMon project was developed on (and for) the Bash shell,
            which is the default shell on many Unix-like systems (or at least
            on many Linux distributions).

            No matter which shell you are using, the Bash shell must be
            installed in order to use SaLoMon.

            Please read the included documentation related to the shell
            compatibility before using SaLoMon.

        2.3 Colorize and highlight certain lines

            In first place, SaLoMon has been developed to monitor and analyze
            files by colorizing lines which contain certain terms (which can
            also be highlighted) to get a fast overview of the contents (for
            example to easily detect error messages inside log files).

            2.3.1 Color config files

                Inside the 'colors' sub-directory there is a sample color
                config file named 'sample_colors.cfg'. It can be used to
                colorize lines containing certain terms with user-defined
                colors. This sample config file also contains some simple
                usage examples how to do this.

            2.3.2 Highlight filter terms

                The '--highlight' command-line argument allows to additionally
                highlight the filter terms inside the corresponding lines (if
                a filter was given) by inverting their colors (sort of marker
                pen like). It can be used with and without a color config.

                You may also use '--highlight-upper', which works the same way
                and additionally switches the letters of the filter terms to
                uppercase.

            2.3.3 Highlight whole lines

                Instead of only highlighting the filter terms, you can also
                highlight the whole line. This does neither require a color
                config nor a filter.

            2.3.4 No colorization and hightlighting

                If you do not need any colorization and highlighting, you may
                use the native shell commands and tools such as 'cat', 'grep'
                and 'tail' instead which are faster and usually already
                installed by default.

        2.4 Config file paths

            Since version 1.1.1 you do not have to give the full path to the
            config files for SaLoMon if these are located in the corresponding
            sub-directories.

            So, in case you only give the file name (instead of the path) for
            the color or filter config like this

                $ ./salomon.sh -a monitor -i /tmp/foobar.log -c colors.cfg \
                               -f filter.cfg

            SaLoMon will first check the current working directory for these
            config files. If these do not exist there, it will check for them
            inside the config sub-directories ('colors' and 'filters') which
            can be found in the SaLoMon script directory.

        2.5 Interactive mode

            Since version 1.8.1 SaLoMon provides an interactive mode which
            allows using text-based dialogs instead of command-line arguments
            to enter relevant information. However, the dialogs can be
            combined with command-line arguments.

            Notice that the interactive mode is not a complete alternative to
            the command-line arguments.

            It is meant for the use on a graphical user interface with desktop
            shortcuts. For example, you can create a desktop shortcut with the
            following command:

                salomon -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg

            This will always monitor the given file. Now, if you want to
            monitor a couple of different files once in a while, you would
            need to create a shortcut for each of them.

            For more flexibility, you can use the following command for the
            shortcut:

                salomon --interactive -a monitor -c /tmp/colors.cfg

            With this, you will be prompted for the relevant information such
            as the file name, filter pattern and highlight mode.

    3. Processing an input file

        The following examples use a color config file. See section 2.3 for
        details.

        3.1 Relevant keystrokes

            The SaLoMon process (no matter if monitoring or analyzing) can be
            canceled at any time by pressing the universal and well-known
            <Ctrl>+<C> keystroke.

            Furthermore, the Bash shell also provides built-in keystrokes to
            pause ("freeze") the output and, of course, to resume again.
            Notice that they are part of the Bash not of SaLoMon.

            By pressing <Ctrl>+<S> the output freezes until defreezing it
            again using <Ctrl>+<Q> or <Return>.

        3.2 Monitor the file

            This feature uses the follow mode of the 'tail' utility to return
            the lines of the file and colorizes the output with user-defined
            colors. The file will be monitored until the user cancels the
            process.

            For example, if you want to monitor the file '/tmp/foobar.log'
            using the file '/tmp/colors.cfg' to colorize certain lines, type:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg

        3.3 Analyze the file

            Instead of monitoring a file, it is also possible to analyze it.
            This will simply return its lines and colorize certain of them,
            then exit.

            For example, if you want to analyze the file '/tmp/foobar.log'
            using the file '/tmp/colors.cfg' to colorize certain lines, type:

                $ ./salomon.sh -a analyze -i /tmp/foobar.log \
                               -c /tmp/colors.cfg

    4. Applying a filter

        The following examples use a color config file. See section 2.3 for
        details.

        It is possible to filter the output to e. g. only return lines that
        contain certain terms. There is also the optional '--ignore-case'
        argument to ignore the case of the given filter pattern.

        The filter pattern also allows spaces, including leading and trailing
        ones.

        4.1 Filter pattern

            For example, to only return lines that contain the term "error",
            you can use the filter argument as follows:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg -f error

            The pattern also allows spaces, but when using spaces the criteria
            must be enclosed either with single (') or double (") quotes, for
            example:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg -f "error while"

            This will return lines that contain the term "error while", but no
            lines which contain only one of those words.

            In case this does not work properly, you may try escaping the
            space (or all of them if there are multiple) using a backslash
            like this:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg -f "error\ while"

            Furthermore, the pattern allows multiple terms. These must be
            separated with semicolons and be enclosed either with single (')
            or double (") quotes, for example:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg -f "error;warning;success"

            This will return lines that contain one of those terms.

            A combination of spaces and multiple terms inside the pattern also
            is supported:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg \
                               -f "error while;warning;success"

        4.2 Filter config file

            Even though, the help output of the script returns that the filter
            argument expects a pattern, it is also possible to give a config
            file containing the pattern.

            Inside the 'filters' sub-directory there is a sample filter config
            file named 'sample_filter.cfg'. This file contains usage examples
            how to filter the output.

            If the sample config file is missing for some reason, you may
            download the project from the website:

                http://www.urbanware.org/salomon.html

            For example, to use the file '/tmp/filter.cfg' as filter pattern,
            type:

                $ ./salomon.sh -a monitor -i /tmp/foobar.log \
                               -c /tmp/colors.cfg -f /tmp/filter.cfg

            Please notice that in case the file does not exist, the script
            will interpret the given path as a pattern instead of a file path.

    5. Exclude lines

        For example, to exclude all lines containing the string "example",
        type:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -e example

        The exclude pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -e "example for"

        This will exclude lines that contain the term "example for", but no
        lines which contain only one of those words.

        In case this does not work properly, you may try escaping the space
        (or all of them if there are multiple) using a backslash like this:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -e "example\ for"

        Furthermore, the pattern allows multiple exclude terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -e "example;foo;bar"

        This will exclude lines that contain one of those terms.

        A combination of spaces and multiple terms inside the exclude pattern
        also is supported:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -e "example for;foo;bar"

    6. Remove certain strings

        For example, to remove the string "example" from all output lines,
        type:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -r example

        The remove pattern also allows spaces, including leading and trailing
        ones. When using spaces, the string must be enclosed either with
        single (') or double (") quotes, for example:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -r "example for"

        This will remove the string "example for", but not just one of those
        words.

        In case this does not work properly, you may try escaping the space
        (or all of them if there are multiple) using a backslash like this:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -r "example\ for"

        Furthermore, the pattern allows multiple remove terms. These must be
        separated with semicolons and be enclosed either with single (') or
        double (") quotes, for example:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -r "example;foo;bar"

        This will remove all of the given terms from the corresponding lines.

        A combination of spaces and multiple terms inside the remove pattern
        also is supported:

            $ ./salomon.sh -a monitor -i /tmp/foobar.log -c /tmp/colors.cfg \
                           -r "example for ;foo;bar"

